{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAGA,SAAS,YAAY,CAAC,IAAiB;IACrC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,UAAU,EACV,EAAE,CAAC,CAAC;IACf,KAAK,EAAE;QACL,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;YACnB,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;gBAC5C,GAAG,EAAE,IAAW;gBAChB,OAAO,EAAE,MAAM;gBACf,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,kBAAkB;gBAC3B,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACtB,CAAC,CAAC;YACH,OAAO,SAAS,CAAC,GAAG,CAClB,CAAC,KAAkD,EAAE,EAAE,CAAC,CAAC;gBACvD,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAChC,QAAQ,EAAE,KAAK,CAAC,QAAQ;aACzB,CAAC,CACH,CAAC;QACJ,CAAC;QACD,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;YACZ,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;gBAC1C,GAAG,EAAE,IAAW;gBAChB,OAAO,EAAE,MAAM;gBACf,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,gBAAgB;gBACzB,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACtB,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QACjB,CAAC;KACF;IACD,QAAQ,EAAE;QACR,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE;YAC/B,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;gBACxC,GAAG,EAAE,IAAW;gBAChB,OAAO,EAAE,MAAM;gBACf,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,gBAAgB;gBACzB,OAAO,EAAE,EAAE,QAAQ,EAAE;gBACrB,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACtB,CAAC,CAAC;YAEH,OAAO;gBACL,EAAE,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,QAAQ;aACT,CAAC;QACJ,CAAC;KACF;CACF,CAAC,CAAC","sourcesContent":["import { AppWebsocket, CellId, AgentPubKey } from '@holochain/conductor-api';\nimport { Resolvers } from '@apollo/client/core';\n\nfunction hashToString(hash: AgentPubKey) {\n  return hash.hash_type.toString('hex') + hash.hash.toString('hex');\n}\n\nexport const profilesUsernameResolvers = (\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'profiles'\n): Resolvers => ({\n  Query: {\n    async allAgents(_, __) {\n      const allAgents = await appWebsocket.callZome({\n        cap: null as any,\n        cell_id: cellId,\n        zome_name: zomeName,\n        fn_name: 'get_all_profiles',\n        payload: null,\n        provenance: cellId[1],\n      });\n      return allAgents.map(\n        (agent: { agent_id: AgentPubKey; username: string }) => ({\n          id: hashToString(agent.agent_id),\n          username: agent.username,\n        })\n      );\n    },\n    async me(_, __) {\n      const profile = await appWebsocket.callZome({\n        cap: null as any,\n        cell_id: cellId,\n        zome_name: zomeName,\n        fn_name: 'get_my_profile',\n        payload: null,\n        provenance: cellId[1],\n      });\n      return profile;\n    },\n  },\n  Mutation: {\n    async setUsername(_, { username }) {\n      const agent = await appWebsocket.callZome({\n        cap: null as any,\n        cell_id: cellId,\n        zome_name: zomeName,\n        fn_name: 'create_profile',\n        payload: { username },\n        provenance: cellId[1],\n      });\n\n      return {\n        id: hashToString(cellId[1]),\n        username,\n      };\n    },\n  },\n});\n"]}