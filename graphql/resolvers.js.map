{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAGA,SAAS,YAAY,CAAC,IAAiB;IACrC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,yBAAyB,CACvC,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,UAAU;IAErB,SAAS,QAAQ,CAAC,OAAe,EAAE,OAAY;QAC7C,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC3B,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,QAAQ;YACnB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,KAAK,EAAE;YACL,KAAK,CAAC,QAAQ,CAAC,MAAM;gBACnB,IAAI,MAAM,CAAC,QAAQ;oBAAE,OAAO,MAAM,CAAC,QAAQ,CAAC;gBAE5C,OAAO,QAAQ,CAAC,oBAAoB,EAAE,EAAE,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;YACtE,CAAC;SACF;QACD,KAAK,EAAE;YACL,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;gBACnB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;gBAC3D,OAAO,SAAS,CAAC,GAAG,CAClB,CAAC,KAAkD,EAAE,EAAE,CAAC,CAAC;oBACvD,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAChC,QAAQ,EAAE,KAAK,CAAC,QAAQ;iBACzB,CAAC,CACH,CAAC;YACJ,CAAC;YACD,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACZ,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBACvD,OAAO,OAAO,CAAC;YACjB,CAAC;SACF;QACD,QAAQ,EAAE;YACR,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE;gBAC/B,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;gBAE7D,OAAO;oBACL,EAAE,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3B,QAAQ;iBACT,CAAC;YACJ,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { AppWebsocket, CellId, AgentPubKey } from '@holochain/conductor-api';\nimport { Resolvers } from '@apollo/client/core';\n\nfunction hashToString(hash: AgentPubKey) {\n  return hash.hash_type.toString('hex') + hash.hash.toString('hex');\n}\n\nexport function profilesUsernameResolvers(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'profiles'\n): Resolvers {\n  function callZome(fn_name: string, payload: any) {\n    return appWebsocket.callZome({\n      cap: null as any,\n      cell_id: cellId,\n      zome_name: zomeName,\n      fn_name: fn_name,\n      payload: payload,\n      provenance: cellId[1],\n    });\n  }\n\n  return {\n    Agent: {\n      async username(parent) {\n        if (parent.username) return parent.username;\n\n        return callZome('get_agent_username', { agent_address: parent.id });\n      },\n    },\n    Query: {\n      async allAgents(_, __) {\n        const allAgents = await callZome('get_all_profiles', null);\n        return allAgents.map(\n          (agent: { agent_id: AgentPubKey; username: string }) => ({\n            id: hashToString(agent.agent_id),\n            username: agent.username,\n          })\n        );\n      },\n      async me(_, __) {\n        const profile = await callZome('get_my_profile', null);\n        return profile;\n      },\n    },\n    Mutation: {\n      async setUsername(_, { username }) {\n        const agent = await callZome('create_profile', { username });\n\n        return {\n          id: hashToString(cellId[1]),\n          username,\n        };\n      },\n    },\n  };\n}\n"]}