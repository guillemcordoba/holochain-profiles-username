{"version":3,"file":"set-username.js","sourceRoot":"","sources":["../../src/elements/set-username.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AAIzD,OAAO,yBAAyB,CAAC;AACjC,OAAO,sBAAsB,CAAC;AAC9B,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,MAAM,OAAgB,WAAY,SAAQ,UAAU;IAApD;QACE,wBAAwB;;QAExB;;;WAGG;QAEH,cAAS,GAAG,CAAC,CAAC;QAUd,uBAAkB,GAA+B,EAAE,CAAC;IAwFtD,CAAC;IAtFC,YAAY;QACV,IAAI,CAAC,cAAc,CAAC,iBAAiB,GAAG,CAAC,QAAgB,EAAE,EAAE;YAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;gBACpC,IAAI,CAAC,cAAc,CAAC,iBAAiB,CACnC,8BAA8B,IAAI,CAAC,SAAS,aAAa,CAC1D,CAAC;gBACF,OAAO;oBACL,KAAK,EAAE,KAAK;iBACb,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;gBAC5C,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,CAAC;gBACtE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aACzB;YAED,OAAO;gBACL,KAAK,EAAE,IAAI;aACZ,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO,GAAG,CAAA;;;;;;;;;;;;;;;KAeT,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;QAC3C,IAAI;YACF,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC9B,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE;oBACT,QAAQ;iBACT;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,cAAc,EAAE;gBAC9B,MAAM,EAAE,EAAE,QAAQ,EAAE;gBACpB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;aACf,CAAC,CACH,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;YACzC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;SACtC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;mBAKI,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;;;;;kBAK3C,QAAQ,CAAC;YACf,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc;YACrC,YAAY,EAAE,CAAC,IAAI,CAAC,cAAc;SACnC,CAAC;sBACU,CAAC,IAAI,CAAC,cAAc;YAChC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK;;mBAE1B,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE;;;KAGtC,CAAC;IACJ,CAAC;CACF;AAlGC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC;8CACtC;AAQd;IADC,KAAK,CAAC,iBAAiB,CAAC;mDACE;AA4F7B,MAAM,UAAU,iBAAiB,CAAC,YAA+B;IAC/D,cAAc,CAAC,MAAM,CACnB,kBAAkB,EAClB,KAAM,SAAQ,WAAW;QACvB,IAAI,aAAa;YACf,OAAO,YAAY,CAAC;QACtB,CAAC;KACF,CACF,CAAC;AACJ,CAAC","sourcesContent":["import { LitElement, css, html, query, property } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { ApolloClient } from '@apollo/client/core';\n\nimport type { TextField } from '@material/mwc-textfield';\nimport '@material/mwc-textfield';\nimport '@material/mwc-button';\nimport { SET_USERNAME } from '../graphql/queries';\n\nexport abstract class SetUsername extends LitElement {\n  /** Public attributes */\n\n  /**\n   * Minimum length that the username needs to have\n   * @attr min-length\n   */\n  @property({ type: Number, attribute: 'min-length' })\n  minLength = 3;\n\n  /** Dependencies */\n  abstract get _apolloClient(): ApolloClient<any>;\n\n  /** Private properties */\n\n  @query('#username-field')\n  _usernameField!: TextField;\n\n  _existingUsernames: { [key: string]: boolean } = {};\n\n  firstUpdated() {\n    this._usernameField.validityTransform = (newValue: string) => {\n      this.requestUpdate();\n      if (newValue.length < this.minLength) {\n        this._usernameField.setCustomValidity(\n          `Username is too shot, min. ${this.minLength} characters`\n        );\n        return {\n          valid: false,\n        };\n      } else if (this._existingUsernames[newValue]) {\n        this._usernameField.setCustomValidity('This username already exists');\n        return { valid: false };\n      }\n\n      return {\n        valid: true,\n      };\n    };\n  }\n\n  static get styles() {\n    return css`\n      .row {\n        display: flex;\n        flex-direction: row;\n      }\n      .column {\n        display: flex;\n        flex-direction: column;\n      }\n      .small-margin {\n        margin-top: 6px;\n      }\n      .big-margin {\n        margin-top: 23px;\n      }\n    `;\n  }\n\n  async setUsername() {\n    const username = this._usernameField.value;\n    try {\n      await this._apolloClient.mutate({\n        mutation: SET_USERNAME,\n        variables: {\n          username,\n        },\n      });\n\n      this.dispatchEvent(\n        new CustomEvent('username-set', {\n          detail: { username },\n          bubbles: true,\n          composed: true,\n        })\n      );\n    } catch (e) {\n      this._existingUsernames[username] = true;\n      this._usernameField.reportValidity();\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"column\">\n        <mwc-textfield\n          id=\"username-field\"\n          outlined\n          @input=${() => this._usernameField.reportValidity()}\n        ></mwc-textfield>\n        <mwc-button\n          id=\"set-username-button\"\n          raised\n          class=${classMap({\n            'small-margin': !!this._usernameField,\n            'big-margin': !this._usernameField,\n          })}\n          .disabled=${!this._usernameField ||\n          !this._usernameField.validity.valid}\n          label=\"SET USERNAME\"\n          @click=${() => this.setUsername()}\n        ></mwc-button>\n      </div>\n    `;\n  }\n}\n\nexport function defineSetUsername(apolloClient: ApolloClient<any>): void {\n  customElements.define(\n    'hpu-set-username',\n    class extends SetUsername {\n      get _apolloClient() {\n        return apolloClient;\n      }\n    }\n  );\n}\n"]}